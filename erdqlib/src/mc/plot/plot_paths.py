import numpy as np
import matplotlib.pyplot as plt
from typing import Type
from erdqlib.src.mc.dynamics import GeometricBrownianMotion, Dynamics

def compare_simulated_paths_with_adjusted_layout(
    dynamics: Type[Dynamics], n_paths: int, random_seed: int, T: float
) -> None:
    """
    Compares simulated paths generated by simulate_paths and simulate_paths_approx in the same plot,
    with adjusted layout and width ratio for subplots.

    Parameters:
        dynamics (Dynamics): A Dynamics object implementing simulate_paths() and simulate_paths_approx().
        simulations (int): Number of simulations to generate.
        random_seed (int): Seed for reproducibility.
        T (float): Time to maturity.
        num_paths (int): Number of paths to visualize per group (default=100).
    """
    paths_exact = dynamics.simulate_paths_exact(simulations=n_paths, random_seed=random_seed)
    paths_numerical = dynamics.simulate_paths_approx(simulations=n_paths, random_seed=random_seed)

    time = np.linspace(0, T, paths_exact.shape[1])

    mean_exact = np.mean(paths_exact, axis=0)
    std_exact = np.std(paths_exact, axis=0)
    mean_numerical = np.mean(paths_numerical, axis=0)
    std_numerical = np.std(paths_numerical, axis=0)
    
    final_prices_exact = paths_exact[:, -1, 0]
    final_prices_numerical = paths_numerical[:, -1, 0]
    
    fig, (ax_paths, ax_dist) = plt.subplots(1, 2, gridspec_kw={'width_ratios': [5, 2]}, figsize=(16, 8))

    for i in range(min(n_paths, paths_exact.shape[0])):
        ax_paths.plot(time, paths_exact[i, :, 0], alpha=0.1, color='blue', label="GBM (simulate_paths_exact)" if i == 0 else None)
    
    for i in range(min(n_paths, paths_numerical.shape[0])):
        ax_paths.plot(time, paths_numerical[i, :, 0], alpha=0.1, color='red', label="GBM (simulate_paths_approx)" if i == 0 else None)
    
    ax_paths.plot(time, mean_exact[:, 0], color='blue', linewidth=2, linestyle='dashed', label='Mean (simulate_paths)')
    ax_paths.fill_between(time, mean_exact[:, 0] - std_exact[:, 0], mean_exact[:, 0] + std_exact[:, 0], color='blue', alpha=0.3, label='Variance Bounds (simulate_paths)')
    
    ax_paths.plot(time, mean_numerical[:, 0], color='red', linewidth=2, linestyle='dashed', label='Mean (simulate_paths_approx)')
    ax_paths.fill_between(time, mean_numerical[:, 0] - std_numerical[:, 0], mean_numerical[:, 0] + std_numerical[:, 0], color='red', alpha=0.3, label='Variance Bounds (simulate_paths_approx)')
    
    ax_paths.set_title("Comparison of Simulated Paths: GBM vs Numerical GBM", fontsize=16)
    ax_paths.set_xlabel("Time to Maturity", fontsize=14)
    ax_paths.set_ylabel("Simulated Asset Price", fontsize=14)
    ax_paths.legend(fontsize=12)
    ax_paths.grid(True, linestyle='--', alpha=0.7)
    
    ax_dist.hist(final_prices_exact, bins=30, density=True, color='blue', alpha=0.5, orientation='horizontal', label="Final Prices (simulate_paths)")
    ax_dist.hist(final_prices_numerical, bins=30, density=True, color='red', alpha=0.5, orientation='horizontal', label="Final Prices (simulate_paths_approx)")
    ax_dist.axhline(np.mean(final_prices_exact), color='blue', linestyle='dashed', linewidth=1, label='Mean (simulate_paths)')
    ax_dist.axhline(np.mean(final_prices_numerical), color='red', linestyle='dashed', linewidth=1, label='Mean (simulate_paths_approx)')
    
    ax_dist.set_xlabel("Density", fontsize=14)
    ax_dist.legend(fontsize=12)
    ax_dist.grid(True, linestyle='--', alpha=0.7)
    
    plt.tight_layout()
    plt.show()
